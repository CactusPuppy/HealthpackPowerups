import "infiniteAmmo.ostw";
import "blind.ostw";
import "bulletBob.ostw";
import "aimbot.ostw";
import "runItBack.ostw";
import "fasterCooldowns.ostw";

enum PowerupType {
  SPEED = "Speed Boost",
  INVISIBILITY = "Invisibility",
  TINY = "Shrink",
  BIG = "Grow",
  DAMAGE_BOOST = "Quad Damage",
  INFINITE_AMMO = "Infinite Ammo",
  BLIND = "Blind Enemies",
  AIMBOT = "Aimbot",
  RUN_IT_BACK = "Run It Back",
  FASTER_COOLDOWNS = "Faster Cooldowns",
  DEADEYE = "Bullet Bob"
}

single struct Powerup {
  public PowerupType name;
  public String icon;
  public Number color_R = 255;
  public Number color_G = 255;
  public Number color_B = 255;
  public Number duration = 20;

  public (Player) => void OnPowerupActivation;
  public (Player) => void OnPowerupDeactivation;
}

Number tinyScale: 0.05;
Number giantScale: 2;
Number giantHealthScalar: 3;

playervar Powerup activePowerup = null;
playervar Number powerupPercentLeft;
playervar Any powerupTimerHUD;
playervar Any[] powerupEffects;
playervar Any[] powerupIWTs;
playervar Any[] powerupHealthPools;

playervar Number playerScale = 1;

globalvar Powerup[] possiblePowerups = [
  {
    name: PowerupType.SPEED,
    icon: AbilityIconString(Hero.Soldier76, Button.Ability1),
    color_R: 160,
    color_G: 232,
    color_B: 27,
    duration: WorkshopSettingInteger("Speed", "Speed Powerup Duration", 20, 1, 60, -1),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        VisibleTo:    AllPlayers(),
        Type:         Effect.LucioSoundBarrierProtectedEffect,
        Color:        <Color>TeamOf(EvaluateOnce(player)),
        Position:     EvaluateOnce(player),
        Radius:       1,
        Reevaluation: EffectRev.VisibleTo
      );
      player.SetMoveSpeed(WorkshopSettingInteger("Speed", "Speed Powerup Move Speed %", 150, 100, 500, 0));
    },
    OnPowerupDeactivation: (player) => {
      player.SetMoveSpeed(100);
    },
  },
  {
    name: PowerupType.INVISIBILITY,
    icon: AbilityIconString(Hero.Sombra, Button.Ability1),
    color_R: 161,
    color_G: 73,
    color_B: 197,
    duration: WorkshopSettingInteger("Invisibility", "Invisibility Powerup Duration", 10, 1, 60, -1),
    OnPowerupActivation: (player) => {
      # Self effect
      powerupEffects[0] = CreateEffect(
        VisibleTo:    EvaluateOnce(player),
        Type:         Effect.ReaperWraithFormEffect,
        Color:        <Color>TeamOf(EvaluateOnce(player)),
        Position:     EvaluateOnce(player),
        Radius:       1,
        Reevaluation: EffectRev.VisibleTo
      );
      // # Because SOMETHING in the netcode isn't letting some fields get populated with the right values
      // MinWait();
      # Teammate effects
      if (WorkshopSettingToggle("Invisibility", "Mark Invisible Player to Teammates", true, 0)) {
        powerupEffects[1] = CreateEffect(
          VisibleTo:    AllPlayers(TeamOf(EvaluateOnce(player))).Remove(EvaluateOnce(player)),
          Type:         Effect.Sphere,
          Color:        <Color>TeamOf(EvaluateOnce(player)),
          Position:     UpdateEveryFrame(EyePosition(EvaluateOnce(player))),
          Radius:       0.5,
          Reevaluation: EffectRev.VisibleToPositionAndRadius
        );
        powerupEffects[2] = CreateEffect(
          VisibleTo:    AllPlayers(TeamOf(EvaluateOnce(player))).Remove(EvaluateOnce(player)),
          Type:         Effect.Sphere,
          Color:        Color.White,
          Position:     UpdateEveryFrame(EyePosition(EvaluateOnce(player))),
          Radius:       0.45,
          Reevaluation: EffectRev.VisibleToPositionAndRadius
        );
        powerupEffects[3] = CreateEffect(
          VisibleTo:    AllPlayers(TeamOf(EvaluateOnce(player))).Remove(EvaluateOnce(player)),
          Type:         Effect.Sphere,
          Color:        Color.Black,
          Position:     UpdateEveryFrame(EyePosition(EvaluateOnce(player)) + FacingDirectionOf(EvaluateOnce(player)) * 0.5),
          Radius:       0.15,
          Reevaluation: EffectRev.VisibleToPositionAndRadius
        );
        powerupEffects[4] = CreateEffect(
          VisibleTo:    AllPlayers(TeamOf(EvaluateOnce(player))).Remove(EvaluateOnce(player)),
          Type:         Effect.Sphere,
          Color:        Color.Black,
          Position:     UpdateEveryFrame(EyePosition(EvaluateOnce(player)) + FacingDirectionOf(EvaluateOnce(player)) * 0.5),
          Radius:       0.15,
          Reevaluation: EffectRev.VisibleToPositionAndRadius
        );
        powerupIWTs[0] = CreateInWorldText(
          VisibleTo:    AllPlayers(TeamOf(EvaluateOnce(player))).Remove(EvaluateOnce(player)),
          Header:       <"<0> <1>", HeroIconString(HeroOf(EvaluateOnce(player))), EvaluateOnce(player)>,
          Position:     UpdateEveryFrame(PositionOf(EvaluateOnce(player)) + Up() * 2),
          Scale:        1.5,
          Clipping:     Clipping.ClipAgainstSurfaces,
          Reevaluation: InworldTextRev.VisibleToAndPosition,
          TextColor:    <Color>TeamOf(player),
          Spectators:   Spectators.VisibleAlways
        );
      }
      SetInvisible(player, InvisibleTo.Enemies);
    },
    OnPowerupDeactivation: (player) => {
      SetInvisible(player, InvisibleTo.None);
    },
  },
  {
    name: PowerupType.TINY,
    icon: AbilityIconString(Hero.WreckingBall, Button.Crouch),
    color_R: 255,
    color_G: 50,
    color_B: 145,
    duration: WorkshopSettingInteger("Tiny", "Tiny Powerup Duration", 15, 1, 60, -1),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        VisibleTo:    AllPlayers(),
        Type:         Effect.EchoCloningEffect,
        Color:        <Color>TeamOf(player),
        Position:     EvaluateOnce(player),
        Radius:       1,
        Reevaluation: EffectRev.VisibleTo
      );
      powerupEffects[1] = CreateEffect(
        VisibleTo:    AllPlayers(),
        Type:         Effect.EchoCloningSound,
        Color:        <Color>TeamOf(player),
        Position:     EvaluateOnce(player),
        Radius:       100,
        Reevaluation: EffectRev.VisibleTo
      );
      StartScalingPlayer(player, EvaluateOnce(player).playerScale, true);
      StartModifyingHeroVoiceLines(EventPlayer(), 1.5, false);
      ChaseVariableOverTime(player.playerScale, WorkshopSettingReal("Tiny", "Tiny Player Scale", 0.1, 0.01, 1), 0.25, TimeChaseReevaluation.None);
    },
    OnPowerupDeactivation: (player) => {
      ChaseVariableOverTime(player.playerScale, 1, 0.25, TimeChaseReevaluation.None);
      WaitUntil(player.playerScale == 1, 1);
      StopModifyingHeroVoiceLines(EventPlayer());
      StopScalingPlayer(player);
    }
  },
  {
    name: PowerupType.BIG,
    icon: AbilityIconString(Hero.Baptiste, Button.Crouch),
    color_R: 238,
    color_G: 109,
    color_B: 14,
    duration: WorkshopSettingInteger("Giant", "Giant Powerup Duration", 20, 10, 60, -1),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        VisibleTo:    AllPlayers(),
        Type:         Effect.WinstonPrimalRageEffect,
        Color:        <Color>TeamOf(player),
        Position:     EvaluateOnce(player),
        Radius:       1,
        Reevaluation: EffectRev.VisibleTo
      );
      powerupEffects[1] = CreateEffect(
        VisibleTo:    AllPlayers(),
        Type:         Effect.WinstonPrimalRageSound,
        Color:        <Color>TeamOf(player),
        Position:     player,
        Radius:       50,
        Reevaluation: EffectRev.VisibleTo
      );
      StartScalingPlayer(player, playerScale, true);
      StartModifyingHeroVoiceLines(EventPlayer(), 0.5, false);
      ChaseVariableOverTime(playerScale, WorkshopSettingReal("Giant", "Giant Player Scale", 2, 1, 5), 0.25, TimeChaseReevaluation.None);
      SetMaxHealth(player, WorkshopSettingReal("Giant", "Giant Player Health %", 300, 100, 500, 0));
      # Must wait a tick because sometimes the health max hasn't actually updated yet
      MinWait();
      SetPlayerHealth(player, MaxHealth(player));
    },
    OnPowerupDeactivation: (player) => {
      SetMaxHealth(player, 100);
      ChaseVariableOverTime(player.playerScale, 1, 0.25, TimeChaseReevaluation.None);
      WaitUntil(player.playerScale == 1, 1);
      StopModifyingHeroVoiceLines(EventPlayer());
      StopScalingPlayer(player);
    }
  },
  {
    name: PowerupType.DAMAGE_BOOST,
    color_R: 238,
    color_B: 14,
    color_G: 14,
    duration: WorkshopSettingInteger("Damage Boost", "Damage Boost Powerup Duration", 5, 1, 60, -1),
    icon: IconString(Icon.Skull),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        AllPlayers(),
        Effect.AnaNanoBoostedEffect,
        Color: <Color>TeamOf(player),
        Position: player,
        Radius: 1,
        Reevaluation: EffectRev.VisibleTo
      );
      powerupEffects[1] = CreateEffect(
        AllPlayers(),
        Effect.AnaNanoBoostedSound,
        Color: <Color>TeamOf(player),
        Position: player,
        Radius: 100,
        Reevaluation: EffectRev.VisibleTo
      );
      SetDamageDealt(player, WorkshopSettingReal("Damage Boost", "Damage Boost %", 400, 100, 1000, 0));
    },
    OnPowerupDeactivation: (player) => {
      SetDamageDealt(player, 100);
    }
  },
  {
    name: PowerupType.INFINITE_AMMO,
    color_R: 246,
    color_G: 157,
    color_B: 38,
    duration: WorkshopSettingInteger("Infinite Ammo", "Infinite Ammo Powerup Duration", 30, 1, 60, -1),
    icon: AbilityIconString(Hero.Pharah, Button.Ultimate),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        VisibleTo: AllPlayers(),
        Type: Effect.TorbjornOverloadingEffect,
        Color: <Color> TeamOf(player),
        Position: player,
        Radius: 1,
        Reevaluation: EffectRev.VisibleTo
      );
      powerupEffects[1] = CreateEffect(
        VisibleTo: AllPlayers(),
        Type: Effect.TorbjornOverloadingSound,
        Color: <Color> TeamOf(player),
        Position: player,
        Radius: 100,
        Reevaluation: EffectRev.VisibleTo
      );
      SetAmmo(EventPlayer(), 0, 9999);
      SetAmmo(EventPlayer(), 1, 9999);
    },
    OnPowerupDeactivation: (player) => {
      SetAmmo(player, 0, Min(Ammo(player, 0), MaxAmmo(player, 0)));
      SetAmmo(player, 1, Min(Ammo(player, 1), MaxAmmo(player, 1)));
    }
  },
  {
    name: PowerupType.BLIND,
    color_R: 100,
    color_G: 50,
    color_B: 200,
    duration: WorkshopSettingInteger("Blindness", "Blindness Powerup Duration", 4, 1, 60, -1),
    icon: IconString(Icon.Eye),
    OnPowerupActivation: (player) => {
      AllPlayers(OppositeTeamOf(TeamOf(player))).blinders.ModAppend(player);
    },
    OnPowerupDeactivation: (player) => {
      AllPlayers(OppositeTeamOf(TeamOf(player))).blinders.ModRemoveByValue(player);
    }
  },
  {
    name: PowerupType.AIMBOT,
    color_R: 242,
    color_G: 40,
    color_B: 87,
    duration: WorkshopSettingInteger("Aimbot", "Aimbot Powerup Duration", 10, 1, 60, -1),
    icon: AbilityIconString(Hero.Soldier76, Button.Ultimate),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        AllPlayers(),
        Effect.Sparkles,
        <Color>TeamOf(),
        UpdateEveryFrame(PositionOf() + Up()),
        1.5,
        EffectRev.VisibleToPositionAndRadius
      );
      powerupEffects[1] = CreateEffect(
        AllPlayers(),
        Effect.EnergySound,
        <Color>TeamOf(),
        UpdateEveryFrame(PositionOf()),
        100,
        EffectRev.VisibleToPositionAndRadius
      );
      player.aimbotEnabled = true;
    },
    OnPowerupDeactivation: (player) => {
      player.aimbotEnabled = false;
    }
  },
  {
    name: PowerupType.RUN_IT_BACK,
    color_R: 251,
    color_G: 131,
    color_B: 118,
    duration: WorkshopSettingInteger("Run It Back", "Run It Back Duration", 10, 1, 60, -1),
    icon: AbilityIconString(Hero.Mercy, Button.Ability2),
    OnPowerupActivation: (p) => {
      runItBackAnchor = { position: PositionOf(), facing: FacingDirectionOf() };

      powerupEffects[0] = CreateEffect(
        AllPlayers(), Effect.BaptisteImmortalityFieldProtectedEffect,
        <Color>TeamOf(), EventPlayer(), 1, EffectRev.VisibleTo
      );
      powerupEffects[1] = CreateEffect(
        AllPlayers(), Effect.BaptisteImmortalityFieldProtectedSound,
        <Color>TeamOf(), EventPlayer(), 80, EffectRev.VisibleTo
      );
      powerupEffects[2] = CreateProjectileEffect(
        AllPlayers(), ProjectileType.ZaryaParticleCannon, AllPlayers(TeamOf()),
        runItBackAnchor.position, Up(), 0, ProjectileEffectReeval.VisibleToFriendlyTo
      );
    },
    OnPowerupDeactivation: (p) => {
      if (runItBackAnchor != null) async RunItBack();
    }
  },
  {
    name: PowerupType.FASTER_COOLDOWNS,
    color_R: 0,
    color_G: 166,
    color_B: 166,
    duration: WorkshopSettingInteger("Faster Cooldowns", "Faster Cooldown Powerup Duration", 20, 1, 60, -1),
    icon: AbilityIconString(Hero.Torbjorn, Button.Ability2),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        VisibleTo:                AllPlayers(),
        Type:                     Effect.SombraHackingSound,
        Color:                    null,
        Position:                 EventPlayer(),
        Radius:                   170,
        Reevaluation:             EffectRev.VisibleTo
      );
    },
    OnPowerupDeactivation: (player) => {
      return;
    }
  },
  {
    name: PowerupType.DEADEYE,
    color_R: 153,
    color_G: 178,
    color_B: 221,
    duration: WorkshopSettingInteger("Bullet Bob", "Bullet Bob Powerup Duration", 12, 1, 60, -1),
    icon: AbilityIconString(Hero.Cassidy, Button.Ultimate),
    OnPowerupActivation: (player) => {
      powerupEffects[0] = CreateEffect(
        AllPlayers(),
        Effect.BadAura,
        <Color>TeamOf(),
        UpdateEveryFrame(PositionOf() + Up()),
        1,
        EffectRev.VisibleToPositionAndRadius
      );
      powerupEffects[1] = CreateEffect(
        AllPlayers(),
        Effect.SigmaGraviticFluxTargetSound,
        <Color>TeamOf(),
        EventPlayer(),
        200,
        EffectRev.VisibleToPositionAndRadius
      );
      canFireBulletBob = true;
    },
    OnPowerupDeactivation: (player) => {
      if (canFireBulletBob) FireBulletBob();
      canFireBulletBob = false;
    }
  }
];
