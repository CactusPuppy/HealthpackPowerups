import "powerupStruct.del";
import "../OSTWUtils/OnScreenText.del";

playervar Boolean canFireBulletBob!;
playervar Any bulletBobTimer!;

rule: "[powerups/bulletBob.ostw] Handle state for bullet bob"
Event.OngoingPlayer
if (canFireBulletBob)
{
  DisallowButton(EventPlayer(), Button.PrimaryFire);
  # Amazing bug
  SetWeapon(EventPlayer(), 1.5);
  bulletBobTimer = CreateProgressBarInWorldText(
    VisibleTo: EventPlayer(),
    Value: powerupPercentLeft,
    Text: <"<0> To Fire", InputBindingString(Button.PrimaryFire)>,
    Position: UpdateEveryFrame(OnScreenText.PlayerRender(EventPlayer(), 0, -0.25)),
    Scale: 1,
    Clipping: Clipping.DoNotClip,
    ProgressBarColor: CustomColor(
      200 + Math.Clamp(powerupPercentLeft * 5 - 80, 0, 100) * .36,
      0 + Math.Clamp(powerupPercentLeft * 5 - 80, 0, 100) * 1.53,
      19 + Math.Clamp(powerupPercentLeft * 5 - 80, 0, 100) * -19,
      flashFactor() * (255 - flashMinOpacity) + flashMinOpacity
    ),
    TextColor: Color.White,
    Reevaluation: ProgressBarWorldEvaluation.PositionValuesAndColor,
    NonteamSpectators: Spectators.VisibleNever
  );

  WaitUntil(!canFireBulletBob, 1000000);

  AllowButton(EventPlayer(), Button.PrimaryFire);
  # Undo amazing bug
  SetWeapon(EventPlayer(), 0);
  DestroyProgressBarInWorldText(bulletBobTimer);

  # End the powerup early
  if (activePowerup.name == PowerupType.DEADEYE) {
    powerupEvent = PlayerPowerupEvent.DEACTIVATE;
    DispatchPowerupEvent();
  }
}

rule: "[powerups/bulletBob.ostw] When player left-clicks with Bullet Bob loaded, fire a projectile"
Event.OngoingPlayer
if (canFireBulletBob)
if (EventPlayer().IsButtonHeld(Button.PrimaryFire))
{
  FireBulletBob();
  canFireBulletBob = false;
}

void FireBulletBob() playervar "[powerups/bulletBob.ostw] Fire a Bullet Bob Projectile"
{
  PlayEffect(
    AllPlayers(), PlayEffect.RingExplosionSound, Color.White,
    EventPlayer(), 100
  );
  CreateProjectile(
    ProjectileType: ProjectileType.MercyCaduceusBlaster,
    Player: EventPlayer(),
    StartPosition: null,
    Direction: null,
    Relative: Relative.ToWorld,
    ModifyHealthType: ModifyHealthType.Damage,
    AffectedTeam: OppositeTeamOf(TeamOf()),
    Amount: 1000,
    AmountScalar: 0.05,
    ExplosionRadius: 1,
    ExplosionEffect: PlayEffect.BadExplosion,
    ExplosionSoundEffect: PlayEffect.ExplosionSound,
    Oversize: WorkshopSettingReal("Bullet Bob", "Bullet Bob Hitbox Size", 0.3, 0, 1, 0),
    Speed: WorkshopSettingInteger("Bullet Bob", "Bullet Bob Projectile Speed", 35, 1, 1000, 0),
    Lifetime: 30,
    Impulse: 0,
    RicochetCount: 0,
    Gravity: 0
  );
}
